{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "#include <iostream>\n\n\nint main(int argc, char** argv)\n{\n	\n	/*public_key();\n	prived_key();*/\n	\n	printf(\"linfert@Edwend:~$ \");\n	fgets(message, 128, stdin);\n	message[strlen(message)-1]='\\0';\n	cryptage();\n	decryptage();\n	\n	printf(\"linfert@Edwend:~$ %s\", message);\n	\n	return 0;\n}",
			"file": "main.cpp",
			"file_size": 270,
			"file_write_time": 131029590879357215,
			"settings":
			{
				"buffer_size": 274,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "	while(strcmp(commande, \"leave\")!=0)\n	{\n		printf(\"%s@%s:~$ \", user, localhost);\n		fgets(commande, 50, stdin);\n		commande[strlen(commande)-1] = '\\0';\n		if(strcmp(commande, \"leave\")!=0)\n		{\n			order(analyse());\n		}\n	}\n\n\n	int maths::power(long a, long long b)\n{\n	int i=0;\n	unsigned long long tampon=1;\n	\n	for(i=0; i<b; i++)\n	{\n		tampon=(tampon*a)%n;\n		//if(lama==1) { printf(\"Test 1 (%d) : %lld\\n\", i, tampon); }\n	}\n	return tampon;\n}\n\nint maths::pgcd(int a, int b)\n{\n	while(a!=b)\n	{\n		if(a>b)\n		{\n			a=a-b;\n		}\n		else\n		{\n			b=b-a;\n		}\n	}\n	\n	//printf(\"Pgcd : %d\\n\", a);\n	return a;\n}\n\n/*int maths::factoriser(int n)\n{\n	int b=2;\n	while(n%b!=0)\n	{\n		b++;\n	}\n	if(n/b==1)\n	{\n		p=b;\n	}\n	p=b;\n	q=n/b;\n	//printf(\"Test { n : %d, p : %d, q : %d }\\n\", n, p, q);\n}*/\n\n//int fonctions::~reception();\n\nvoid fonctions::public_key()\n{\n	int PGCD=0;\n	\n	/*printf(\"Entrez un nombre premier p : \");\n	scanf(\"%i\", &p);\n	printf(\"Entrez un nombre premier q : \");\n	scanf(\"%i\", &q);*/\n	\n	n=p*q;\n	phin=(p-1)*(q-1);\n	//printf(\"Phin : %d\\n\", phin);\n	\n	\n	while(PGCD!=1)\n	{\n		while(e<p)\n		{\n			e++;\n		}\n		e++;\n		//printf(\"p : %d | e : %d\\n\", p, e);\n		PGCD=maths::pgcd(e, phin);\n	}\n	\n	//printf(\"Clef publique : %d , %d\\n\", e, n);\n	\n}\n\nvoid fonctions::prived_key()\n{\n	int i=0;\n	\n	//factoriser(n);\n	//phin=(p-1)*(q-1);\n	\n	while(i==0)\n	{\n		d++;\n		if((e*d)%phin==1 && ((e*d)-1)%phin==0)\n		{\n			i=1;\n		}\n	}\n	\n	printf(\"Clef privée : %d, %d\\n\", d, n);\n}\n\nvoid fonctions::cryptage(unsigned jjchar message)\n{\n	int i=0, ascii=0, n_carac=0;\n	n_carac=strlen(message);\n	printf(\"Il y a %d caractres.\\n\", n_carac);\n	\n	for(i=0; i<n_carac; i++)\n	{\n		ascii=(int) message[i];\n		crypted_message[i]=power(ascii, e);\n		//printf(\"%c : %d : %lld\\n\", message[i], ascii, crypted_message[i]);\n	}\n	strcpy(message,document);\n}\n\nvoid fonctions::decryptage()\n{\n	int i=0, ascii=0, tampon=0;\n	\n	for(i=0; i<256; i++)\n	{\n		if(crypted_message[i]!=0)\n		{\n			tampon++;\n		}\n	}\n	for(i=0; i<tampon; i++)\n	{\n		ascii=power(crypted_message[i], d);\n		message[i]=(char) (ascii);\n		//printf(\"%c : %d : %lld\\n\", message[i], ascii, crypted_message[i]);\n	}\n	\n}\n\nvoid cryptage()\n{\n\n	p=malloc(sizeof(int));\n	q=malloc(sizeof(int));\n	if(p==NULL && q==NULL) // On vérifie si la mémoire a été allouée\n	{\n		exit(0); // Erreur : arrêt du programme.\n	}\n	free(p); // On n'a plus besoin de la mémoire, on la libère\n	free(q);\n\n    return 0;\n}",
			"file": "lib/interpretor.cpp",
			"file_size": 83,
			"file_write_time": 131029598427517160,
			"settings":
			{
				"buffer_size": 2344,
				"line_ending": "Unix"
			}
		},
		{
			"file": "core/crypt.h",
			"settings":
			{
				"buffer_size": 898,
				"line_ending": "Unix"
			}
		},
		{
			"file": "core/crypt.cpp",
			"settings":
			{
				"buffer_size": 1979,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/root/Dev/Aleo",
		"/root/Dev/Aleo/core",
		"/root/Dev/Aleo/dev",
		"/root/Dev/Aleo/lib"
	],
	"file_history":
	[
		"/root/Dev/Aleo/Aleo.sublime-project",
		"/root/Dev/Aleo/core/crypt.h",
		"/root/Dev/Aleo/dev/makefile",
		"/root/Dev/Aleo/main.cpp",
		"/root/Dev/Aleo/lib/interpretor.cpp",
		"/root/Dev/Aleo/lib/interpretor.h",
		"/root/Dev/Aleo/core/crypt.cpp"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 274,
						"regions":
						{
						},
						"selection":
						[
							[
								19,
								19
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "lib/interpretor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2344,
						"regions":
						{
						},
						"selection":
						[
							[
								1898,
								1898
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": -0.0,
						"translation.y": 1425.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "core/crypt.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 898,
						"regions":
						{
						},
						"selection":
						[
							[
								802,
								804
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "core/crypt.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1979,
						"regions":
						{
						},
						"selection":
						[
							[
								532,
								532
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 1230.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Aleo.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 182.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
